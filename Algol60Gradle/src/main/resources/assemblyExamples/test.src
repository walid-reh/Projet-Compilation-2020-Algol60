//Définitions des registres usuels
SP EQU R15 //SP => StackPointer
FR EQU R0// FR => FunctionResult
WA EQU R11
WR EQU R14 //WR=> Work Register
BP EQU R13 // BP=> Base Pointer
SC EQU R12
EXIT_EXC EQU 64 // EXIT EXCEPTION
READ_EXC EQU 65 // READ EXCEPTION
WRITE_EXC EQU 66 // WRITE EXCEPTION
NUL EQU 0
NULL EQU 0
NIL EQU 0
STACK_ADRS EQU 0x1000
LOAD_ADRS EQU 0xF000


ORG LOAD_ADRS
START main_
print_     
LDQ 0, R1
STW BP, -(SP)
LDW BP, SP
SUB SP, R1, SP
LDW R0, (BP)4
TRP #WRITE_EXC
LDW SP, BP
LDW BP, (SP)+
RTS 
printi_
STW BP, -(SP)
LDW BP, SP
ADI SP, SP, #-8
ADI SP, SP, #-2
LDW R0, (BP)4
STW R0, (BP)-10
LDW R0, #10
STW R0, -(SP)
ADI BP, R0, #-8
STW R0, -(SP)
LDW R0, (BP)-10
STW R0, -(SP)
JSR @itoa_
ADI SP, SP, #6
ADI BP, R0, #-8
STW R0, -(SP)
JSR @print_
ADI SP, SP, #2
LDW SP, BP
LDW BP, (SP)+
RTS
ITOA_I       equ 4      // offset du paramètre i
ITOA_P      equ 6      // offset du paramètre p
ITOA_B      equ 8      // offset du paramètre b
ASCII_MINUS equ 45     // code ASCII de -
ASCII_PLUS  equ 43     // code ASCII de +
ASCII_SP    equ 32     // code ASCII d'eSPace SP
ASCII_0     equ 48     // code ASCII de zéro (les autres chiffres jusqu'à 9 suivent dans l'ordre)
ASCII_A     equ 65     // code ASCII de A (les autres lettres jusqu'à Z suivent dans l'ordre alphabétique)
itoa_
stw BP, -(SP)
ldw BP, SP
// récupération des paramètres depuis pile vers registres
ldw r0, (BP)ITOA_I    // r0 = i    
ldw r1, (BP)ITOA_B    // r1 = b
// gère le signe: normalement itoa gère des int c'est à dire des entiers signés, 
// mais en fait seulement pour b=10;
// dans ce cas calcule le signe dans r3 et charge r0 avec la valeur absolue de i
ldq ASCII_SP, r3      // code ASCII de eSPace (SPace) -> r3
ldq 10, WR            // 10 -> WR
cmp r1, WR            // charge les indicateurs de b - 10
bne NOSIGN-$-2        // si non égal (donc si b != 10) saute en NOSIGN, sinon calcule signe
ldq ASCII_PLUS, r3    // charge le code ASCII du signe plus + dans r3
tst r0                // charge les indicateurs de r0 et donc de i
bge POSIT-$-2         // saute en POSIT si i >= 0
neg r0, r0            // change le signe de r0
ldq ASCII_MINUS, r3   // charge le code ASCII du signe moins - dans r3
POSIT   NOP                   // r3 = code ASCII de signe: SP pour aucun, - ou +

// convertit l'entier i en chiffres et les empile de droite à gauche
NOSIGN  ldw r2, r0            // r2 <- r0
CNVLOOP ldw r0, r2            // r0 <- r2
// effectue "créativement" la division par b supposé pair (car l'instruction div est hélas signée ...)
// d=2*d' , D = d * q + r  , D = 2*D'+r" , D' = d' * q + r' => r = 2*r'+r"
// un bug apparaît avec SRL r0, r0 avec r0 = 2 : met CF à 1 !!
srl r1, r1            // r1 = b/2
ani r0, r4, #1        // ANd Immédiate entre r0 et 00...01 vers r4:
				  // bit n°0 de r0 -> r4; r4 = reste" de r0/2
srl r0, r0            // r0 / 2 -> r0
div r0, r1, r2        // quotient = r0 / r1 -> r2, reste' = r0 % r1 -> r0
shl r0, r0            // r0 = 2 * reste'
add r0, r4, r0        // r0 = reste = 2 * reste' + reste" => r0 = chiffre
shl r1, r1            // r1 = b

adq -10, r0           // chiffre - 10 -> r0 
bge LETTER-$-2        // saute en LETTER si chiffre >= 10
adq 10+ASCII_0, r0    // ajoute 10 => r0 = chiffre, ajoute code ASCII de 0 
				  // => r0 = code ASCII de chiffre
bmp STKCHR-$-2        // saute en STKCHR 
LETTER  adq ASCII_A, r0       // r0 = ASCII(A) pour chiffre = 10, ASCII(B) pour 11 ...
				  // ajoute code ASCII de A => r = code ASCII de chiffre
STKCHR  stw r0, -(SP)         // empile code ASCII du chiffre 
				  // (sur un mot complet pour pas désaligner pile)
tst r2                // charge les indicateurs en fonction du quotient ds r2)
bne CNVLOOP-$-2       // boucle si quotient non nul; sinon sort
// les caractères sont maintenant empilés : gauche en haut et droit en bas
// recopie les caractères dans le tampon dans le bon ordre: de gauche à droite
ldw r1, (BP)ITOA_P    // r1 pointe sur le début du tampon déjà alloué 
stb r3, (r1)+         // copie le signe dans le tampon
CPYLOOP ldw r0, (SP)+         // dépile code du chiffre gauche (sur un mot) dans r0
stb r0, (r1)+         // copie code du chiffre dans un Byte du tampon de gauche à droite
cmp SP, BP            // compare SP et sa valeur avant empilement des caractères qui était BP
bne CPYLOOP-$-2       // boucle s'il reste au moins un chiffre sur la pile
ldq 10, r0
stb r0, (r1)+
ldq NUL, r0           // charge le code du caractère NUL dans r0
stb r0, (r1)+         // sauve code NUL pour terminer la chaîne de caractères
// termine
ldw r0, (BP)ITOA_P    // retourne le pointeur sur la chaîne de caractères
// UNLINK: fermeture de l'environnement de la fonction itoa
ldw SP, BP            // SP <- BP : abandonne infos locales; SP pointe sur ancinne valeur de BP
ldw BP, (SP)+         // dépile ancienne valeur de BP dans BP; SP pointe sur adresse de retour
RTS                   // retourne au programme appelant
fact_ STW BP,-(SP) //save BP content in the stack LINKING
LDW BP, SP // update of current BP
STW SC,-(SP) //STATIC CHAIN
//function bloc
// res:=3;
LDW R1, #3
LDW R2,BP
ADQ -2,R2 //R2 holds a Static Chain
LDW R2,(R2) //LEAP to change environment
STW R1,(R2)-4// Found variable... Storing it
STW BP,-(SP) //save BP content in the stack LINKING
LDW R8,BP // saves BP for SC
LDW BP, SP // update of current BP
STW R8,-(SP)// STATIC CHAIN
//NEW BLOCK 2,3
// y:=2
LDW R1, #2
LDW R2,BP
ADQ -2,R2 //R2 holds a Static Chain
LDW R2,(R2) //LEAP to change environment
ADQ -2,R2 //R2 holds a Static Chain
LDW R2,(R2) //LEAP to change environment
STW R1,(R2)-6// Found variable... Storing it
LDW SP, BP //UNLINKING
LDW BP, (SP)
ADQ 2, SP
// y:=2
LDW SP, BP //UNLINKING
LDW BP, (SP)
ADQ 2, SP
RTS // end of fact
//FUNC DEC END
main_ LDW SP,#STACK_ADRS //initialising Stack Pointer
LDQ NIL, BP //BP loaded with 0
STW BP, -(SP) // Enqueue BP value
LDW BP, SP //BP points at the same adresse as SP
LDQ NIL, R7
STW R1, -(SP)
ADQ -4,SP
// res:=1;
LDW R1, #1
STW R1, (BP)-4
// res:=fact(99);
// res:=fact(99);
STW R1 ,-(SP) //saving registers
STW R2 ,-(SP) //saving registers
STW R3 ,-(SP) //saving registers
STW R4 ,-(SP) //saving registers
STW R5 ,-(SP) //saving registers
STW R6 ,-(SP) //saving registers
STW R7 ,-(SP) //saving registers
STW R8 ,-(SP) //saving registers
STW R9 ,-(SP) //saving registers
STW R10 ,-(SP) //saving registers
STW R11 ,-(SP) //saving registers
LDW R5, #99
STW R5,-(SP) // pushing parameter 
//Computing Static chaining
LDW SC,BP //puting BP in SC
JSR @fact_ // function call
ADQ 2,SP //popping parameters
LDW R11 ,(SP)+ //reloading registers
LDW R10 ,(SP)+ //reloading registers
LDW R9 ,(SP)+ //reloading registers
LDW R8 ,(SP)+ //reloading registers
LDW R7 ,(SP)+ //reloading registers
LDW R6 ,(SP)+ //reloading registers
LDW R5 ,(SP)+ //reloading registers
LDW R4 ,(SP)+ //reloading registers
LDW R3 ,(SP)+ //reloading registers
LDW R2 ,(SP)+ //reloading registers
LDW R1 ,(SP)+ //reloading registers
//End of FunctionCall
LDW R1, R0 // getting the result of fact's call
STW R1, (BP)-4
// res:=9;
LDW R1, #9
STW R1, (BP)-4
// res:=8;
LDW R1, #8
STW R1, (BP)-4
// y:=5;
LDW R1, #5
STW R1, (BP)-6
// res:=3
LDW R1, #3
STW R1, (BP)-4
TRP #EXIT_EXC
JEA @main_
